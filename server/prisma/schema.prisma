generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                  @id @default(autoincrement())
  email            String               @unique
  password         String?
  name             String?
  isVerified       Boolean              @default(false)
  verificationcode Verificationcode?
  team             UserTeam[]
  createdMeetings  Meeting[]            @relation("MeetingCreator")
  meetingAttendees MeetingUser[]
  schedule         IndividualSchedule[]
  blockedTimes     BlockedTime[]

  createdAt DateTime @default(now())
}

model Team {
  id         Int        @id @default(autoincrement())
  name       String
  inviteCode String     @unique
  user       UserTeam[]
  meetings   Meeting[]
}

model UserTeam {
  id       Int          @id @default(autoincrement())
  status   inviteStatus @default(PENDING)
  role     Role         @default(MEMBER)
  isActive Boolean      @default(false)
  User     User         @relation(fields: [userId], references: [id])
  userId   Int
  Team     Team         @relation(fields: [teamId], references: [id])
  teamId   Int

  @@unique([userId, teamId])
}

model Meeting {
  id          Int           @id @default(autoincrement())
  title       String
  duration    Int
  priority    Priority      @default(MEDIUM)
  deadline    DateTime?
  scheduledAt DateTime?
  status      MeetingStatus @default(PENDING)

  teamId    Int
  createdBy Int

  team      Team          @relation(fields: [teamId], references: [id])
  creator   User          @relation("MeetingCreator", fields: [createdBy], references: [id])
  attendees MeetingUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MeetingUser {
  id         Int     @id @default(autoincrement())
  meetingId  Int
  userId     Int
  isRequired Boolean @default(true)

  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([meetingId, userId])
}

model IndividualSchedule {
  id        Int          @id @default(autoincrement())
  userId    Int
  title     String
  dayOfWeek Int
  startTime String
  endTime   String
  type      ScheduleType @default(AVAILABLE)
  isVisible Boolean      @default(true)

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockedTime {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String   @default("Busy")
  startTime DateTime
  endTime   DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Verificationcode {
  id        Int       @id @default(autoincrement())
  code      String
  types     CodeTypes
  expireAt  DateTime
  createdAt DateTime  @default(now())
  attempts  Int
  used      Boolean   @default(false)
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
}

enum CodeTypes {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum inviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  MEMBER
  LEADER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum MeetingStatus {
  PENDING // Not scheduled yet
  SCHEDULED // Time confirmed
  COMPLETED // Meeting happened
  CANCELLED // Meeting cancelled
}

enum ScheduleType {
  AVAILABLE // "Free for meetings"
  BUSY // "Working but prefer no meetings"
  BREAK // "Lunch/coffee break"
  PREFERRED // "Best time to meet with me"
}
